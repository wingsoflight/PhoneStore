{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/data.service.ts","webpack:///src/app/phone-detail/phone-detail.component.ts","webpack:///src/app/phone-detail/phone-detail.component.html","webpack:///src/app/phone.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AppComponent","dataService","phone","tableMode","loadPhones","getPhones","subscribe","data","phones","createPhone","push","updatePhone","cancel","p","deletePhone","add","selector","templateUrl","providers","routes","path","component","AppModule","forRoot","imports","declarations","bootstrap","DataService","http","url","get","post","put","PhoneDetailComponent","route","location","getPhone","snapshot","paramMap","Phone","name","price","manufacturerId","platform","bootstrapModule"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component, OnInit, NgModule } from '@angular/core';\r\nimport { DataService } from './data.service';\r\nimport { Phone } from './phone';\r\n\r\n\r\n@Component({\r\n    selector: 'app',\r\n    templateUrl: './app.component.html',\r\n    providers: [DataService]\r\n})\r\n\r\nexport class AppComponent implements OnInit {\r\n\r\n    phone: Phone = new Phone();   // изменяемый товар\r\n    phones: Phone[];                // массив товаров\r\n    tableMode: boolean = true;          // табличный режим\r\n\r\n    constructor(private dataService: DataService) { }\r\n\r\n    ngOnInit() {\r\n        this.loadPhones();    // загрузка данных при старте компонента  \r\n    }\r\n    // получаем данные через сервис\r\n    loadPhones() {\r\n        this.dataService.getPhones()\r\n            .subscribe((data: Phone[]) => this.phones = data);\r\n    }\r\n    // сохранение данных\r\n    save() {\r\n        if (this.phone.id == null) {\r\n            this.dataService.createPhone(this.phone)\r\n                .subscribe((data: Phone) => this.phones.push(data));\r\n        } else {\r\n            this.dataService.updatePhone(this.phone)\r\n                .subscribe(data => this.loadPhones());\r\n        }\r\n        this.cancel();\r\n    }\r\n    editPhone(p: Phone) {\r\n        this.phone = p;\r\n    }\r\n    cancel() {\r\n        this.phone = new Phone();\r\n        this.tableMode = true;\r\n    }\r\n    delete(p: Phone) {\r\n        this.dataService.deletePhone(p.id)\r\n            .subscribe(data => this.loadPhones());\r\n    }\r\n    add() {\r\n        this.cancel();\r\n        this.tableMode = false;\r\n    }\r\n    selectPhone(p: Phone): void{\r\n        this.phone = p;\r\n    }\r\n}","<h1>Список моделей</h1>\r\n<input type=\"button\" value=\"Добавить\" class=\"btn btn-default\" (click)=\"add()\" />\r\n<table *ngIf=\"tableMode; else create\" class=\"table table-striped\">\r\n    <thead>\r\n        <tr>\r\n            <td>Модель</td>\r\n            <td>Производитель</td>\r\n            <td>Цена</td>\r\n            <td></td>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n        <tr *ngFor=\"let p of phones\">\r\n            <ng-template [ngIf]=\"phone?.id != p.id\" [ngIfElse]=\"edit\">\r\n                <td>{{p?.name}}</td>\r\n                <td>{{p?.price}}</td>\r\n                <td>\r\n                    <button class=\"btn btn-sm btn-primary\" (click)=\"editPhone(p)\">Изменить</button>\r\n                    <button class=\"btn btn-sm btn-danger\" (click)=\"delete(p)\">Удалить</button>\r\n                </td>\r\n            </ng-template>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n\r\n<!--шаблон для редактирования-->\r\n<ng-template #edit>\r\n    <td>\r\n        <input type=\"text\" [(ngModel)]=\"phone.name\" class=\"form-control\" />\r\n    </td>\r\n    <td>\r\n        <input type=\"number\" [(ngModel)]=\"phone.price\" class=\"form-control\" />\r\n    </td>\r\n    <td>\r\n        <input type=\"button\" value=\"Сохранить\" (click)=\"save()\" class=\"btn btn-sm btn-success\" />\r\n        <input type=\"button\" value=\"Отмена\" (click)=\"cancel()\" class=\"btn btn-sm btn-warning\" />\r\n    </td>\r\n</ng-template>\r\n\r\n<!--шаблон для добавления-->\r\n<ng-template #create>\r\n    <div class=\"form-group\">\r\n        <label>Модель</label>\r\n        <input type=\"text\" [(ngModel)]=\"phone.name\" class=\"form-control\" />\r\n    </div>\r\n    <div class=\"form-group\">\r\n        <label>Цена</label>\r\n        <input type=\"number\" [(ngModel)]=\"phone.price\" class=\"form-control\" />\r\n    </div>\r\n    <div>\r\n        <input type=\"button\" value=\"Сохранить\" (click)=\"save()\" class=\"btn btn-success\" />\r\n        <input type=\"button\" value=\"Отмена\" (click)=\"cancel()\" class=\"btn btn-warning\" />\r\n    </div>\r\n</ng-template>","import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { AppComponent } from './app.component';;\r\nimport { PhoneDetailComponent } from './phone-detail/phone-detail.component'\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nconst routes: Routes = [\r\n    { path: 'detail/:id', component: PhoneDetailComponent },\r\n];\r\n@NgModule({\r\n    imports: [BrowserModule, FormsModule, HttpClientModule, RouterModule.forRoot(routes)],\r\n    exports: [RouterModule],\r\n    declarations: [AppComponent],\r\n    bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Phone } from './phone';\r\n\r\n@Injectable()\r\nexport class DataService {\r\n\r\n    private url = \"/api/phones\";\r\n\r\n    constructor(private http: HttpClient) {\r\n    }\r\n\r\n    getPhones() {\r\n        return this.http.get(this.url);\r\n    }\r\n\r\n    getPhone(id: number) {\r\n        return this.http.get(this.url + '/' + id);\r\n    }\r\n\r\n    createPhone(phone: Phone) {\r\n        return this.http.post(this.url, phone);\r\n    }\r\n    updatePhone(phone: Phone) {\r\n\r\n        return this.http.put(this.url, phone);\r\n    }\r\n    deletePhone(id: number) {\r\n        return this.http.delete(this.url + '/' + id);\r\n    }\r\n}","import { Component, OnInit, Input } from '@angular/core';\nimport { Phone } from '../phone';\nimport { DataService } from '../data.service';\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Location } from '@angular/common';\r\n\n\n@Component({\n  selector: 'phone-detail',\n    templateUrl: './phone-detail.component.html',\n    providers: [DataService]\n})\nexport class PhoneDetailComponent implements OnInit {\n    @Input() phone: Phone;\n    constructor(\r\n        private route: ActivatedRoute,\r\n        private dataService: DataService,\r\n        private location: Location\r\n    ) { }\n\n    ngOnInit(): void {\n        this.getPhone();\n    }\n\n    getPhone(): void {\n        const id = +this.route.snapshot.paramMap.get('id');\r\n        this.dataService.getPhone(id)\r\n            .subscribe((data: Phone) => this.phone = data);\r\n    }\n\n}\n","<div *ngIf=\"phone\">\r\n    <h2>{{phone.name | uppercase}}</h2>\r\n    <div><span>id: </span>{{phone.id}}</div>\r\n    <div>\r\n        <label>\r\n            Model:\r\n            <input [(ngModel)]=\"phone.name\" placeholder=\"Model\" />\r\n        </label>\r\n        <label>\r\n            Price:\r\n            <input [(ngModel)]=\"phone.price\" placeholder=\"Price\" />\r\n        </label>\r\n        <>\r\n    </div>\r\n</div>","export class Phone{\r\n    constructor(\r\n        public id?: number,\r\n        public name?: string,\r\n        public price?: number,\r\n        public manufacturerId?: number\r\n    ) { }\r\n}","import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\nimport { enableProdMode } from '@angular/core';\r\nimport { AppModule } from './app/app.module';\r\n\r\nenableProdMode();\r\nconst platform = platformBrowserDynamic();\r\nplatform.bootstrapModule(AppModule);"]}